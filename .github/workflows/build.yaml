name: Build
on: push

jobs:
    build:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}
        strategy:
            fail-fast: false
            matrix:
                config:
                - {
                    name: "Ubuntu-gcc",
                    os: ubuntu-latest,
                    set_path: "export PATH=$PATH:/home/runner/.local/bin",
                    conan_profile: './tools/profiles/ubuntu_gcc_Release_gh.txt',
                    cc: "gcc-9",
                    cxx: "g++-9"
                  }
                - {
                    name: "Ubuntu-clang",
                    os: ubuntu-latest,
                    set_path: "export PATH=$PATH:/home/runner/.local/bin",
                    conan_profile: './tools/profiles/ubuntu_clang_Release_gh.txt',
                    cc: "clang",
                    cxx: "clang++"
                  }
                - {
                    name: "macOs-clang",
                    os: macos-latest,
                    set_path: "",
                    conan_profile: './tools/profiles/macos_clang_Release_gh.txt',
                    cc: "clang",
                    cxx: "clang++"
                  }
                - {
                    name: "Windows-msvc",
                    os: windows-latest,
                    set_path: "",
                    conan_profile: './tools/profiles/win_msvc_Release_gh.txt',
                    cc: "gcc",
                    cxx: "g++"
                  }
        steps:
            - name: Check out repository
              uses: actions/checkout@v2

            - name: Download and Install Dependencies
              run: |
                  pip3 install wheel setuptools urllib3==1.26.0 chardet==3.0.4
                  pip3 install conan

            - name: Configure and Build
              env:
                CC: ${{ matrix.config.cc }}
                CXX: ${{ matrix.config.cxx }}
              run: |
                  ${{ matrix.config.set_path }}
                  git submodule update --init --recursive
                  conan install -if ${{ github.workspace }}/build -pr ${{ matrix.config.conan_profile }} ${{ github.workspace }} --build=missing
                  cd ${{ github.workspace }}/build
                  conan build ${{ github.workspace }}

            - name: Run tests
              if: ${{ !contains(matrix.config.os, 'Windows') }}
              run: |
                  cd build
                  cmake --build . --target test

            - name: Create package
              run: |
                  ${{ matrix.config.set_path }}
                  conan package -bf build -if build -pf package .

            - name: Pack Build Results
              if: always()
              shell: cmake -P {0}
              run: |
                  execute_process(COMMAND ${CMAKE_COMMAND}
                                          -E tar cJfv "build-results-${{ matrix.config.name }}.tar.xz" "build/")

            - name: Upload Build Results
              if: always()
              uses: actions/upload-artifact@v1
              with:
                  path: ./build-results-${{ matrix.config.name }}.tar.xz
                  name: build-results-${{ matrix.config.name }}.tar.xz

            - name: Install
              run: |
                  mkdir -p ${{ github.workspace }}/install_dir
                  cmake --install ${{ github.workspace }}/build --prefix ${{ github.workspace }}/install_dir

            - name: Pack
              shell: cmake -P {0}
              run: |
                  execute_process(COMMAND ${CMAKE_COMMAND}
                                          -E tar cJfv "${{ matrix.config.name }}.tar.xz" "${{ github.workspace }}/install_dir")

            - name: Upload
              uses: actions/upload-artifact@v1
              with:
                  path: ./${{ matrix.config.name }}.tar.xz
                  name: ${{ matrix.config.name }}.tar.xz



    upload_package:
      #if: {{ github.ref == 'ref/head/development' }}
        runs-on: ${{ matrix.config.os }}
        needs: build
        name: "Conan package ${{ matrix.config.os }}"
        strategy:
            fail-fast: false
            matrix:
                config:
                - {
                    name: "Ubuntu-gcc",
                    os: ubuntu-latest,
                    set_path: "export PATH=$PATH:/home/runner/.local/bin",
                  }
                - {
                    name: "Ubuntu-clang",
                    os: ubuntu-latest,
                    set_path: "export PATH=$PATH:/home/runner/.local/bin",
                  }
                - {
                    name: "macOs-clang",
                    os: macos-latest,
                    set_path: "",
                  }
                - {
                    name: "Windows-msvc",
                    os: windows-latest,
                    set_path: "",
                  }

        steps:
            - name: Create and Upload
              run: |
                ${{ matrix.config.set_path }}
                rm -rf build
                conan remote add pagoda https://api.bintray.com/conan/diegoarjz/Pagoda
                conan user -p ${{ secrets.CONAN_API_KEY }} -r pagoda ${{ secrets.CONAN_USERÂ }}
                conan create . pagoda pagoda/development
                conan upload pagoda/0.1@pagoda/development -r pagoda --all

    release:
        if: contains(github.ref, 'tags/v')
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1.0.0
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ github.ref }}
                release_name: Release ${{ github.ref }}
                draft: false
                prerelease: false

            - name: Store Release url
              run: |
                echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

            - uses: actions/upload-artifact@v1
              with:
                path: ./upload_url
                name: upload_url

    publish:
        if: contains(github.ref, 'tags/v')
        runs-on: ${{ matrix.config.os }}
        needs: release
        strategy:
            fail-fast: false
            matrix:
                config:
                - {
                    name: "Ubuntu-gcc",
                    os: ubuntu-latest,
                  }
                - {
                    name: "Ubuntu-clang",
                    os: ubuntu-latest,
                  }
                - {
                    name: "macOs-clang",
                    os: ubuntu-latest,
                  }
                - {
                    name: "Windows-msvc",
                    os: windows-latest,
                  }

        steps:
            - name: Download artifact
              uses: actions/download-artifact@v1
              with:
                  name: ${{ matrix.config.name }}.tar.xz
                  path: ./

            - name: Download URL
              uses: actions/download-artifact@v1
              with:
                name: upload_url
                path: ./
            - id: set_upload_url
              run: |
                upload_url=`cat ./upload_url`
                echo ::set-output name=upload_url::$upload_url

            - name: Upload to Release
              id: upload_to_release
              uses: actions/upload-release-asset@v1.0.1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
                asset_path: ./${{ matrix.config.name }}.tar.xz
                asset_name: ${{ matrix.config.name }}.tar.xz
                asset_content_type: application/x-gtar
