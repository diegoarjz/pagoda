name: Build
on: push

jobs:
    build:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}
        strategy:
            fail-fast: false
            matrix:
                config:
                - {
                    name: "Ubuntu Latest GCC",
                    os: ubuntu-latest,
                    cc: "gcc",
                    cxx: "g++",
                    set_path: "export PATH=$PATH:/home/runner/.local/bin"
                  }
                - {
                    name: "Ubuntu Latest clang",
                    os: ubuntu-latest,
                    cc: "clang",
                    cxx: "clang++",
                    set_path: "export PATH=$PATH:/home/runner/.local/bin"
                  }
                - {
                    name: "macOs Latest clang",
                    os: macos-latest,
                    cc: "clang",
                    cxx: "clang++",
                    set_path: ""
                  }
                - {
                    name: "Windows Latest",
                    os: windows-latest,
                    cc: "clang",
                    cxx: "clang++",
                    set_path: ""
                  }
        steps:
            - name: Check out repository
              uses: actions/checkout@v2
            - name: Download and Install Dependencies
              run: |
                  pip3 install wheel setuptools
                  pip3 install conan
                  ${{ matrix.config.set_path }}
                  echo $PATH
                  conan --version
                  conan install -if ${{ github.workspace }}/build . --build=missing -s compiler=gcc -s compiler.version=8.1 -s compiler.libcxx=libstdc++
            - name: Configure and Build
              run: |
                  set CC=${{ matrix.config.cc }}
                  set CXX=${{ matrix.config.cxx }}
                  git submodule update --init --recursive
                  cd ${{ github.workspace }}/build
                  cmake .. -DCMAKE_BUILD_TYPE=Release -T"LLVM-vs2017" -DPAGODA_VERSION=${{ github.repository }}-${{ github.run_number }} -DPAGODA_BUILD_NUMBER=${{ github.run_number }}
                  cmake --build . -j4

            - name: Run tests
              run: |
                  cd build
                  cmake --build . --target test
            - name: Pack Regression Test Results
              if: always()
              shell: cmake -P {0}
              run: |
                  execute_process(COMMAND ${CMAKE_COMMAND}
                                          -E tar cJfv "${{ matrix.config.name }}-regression_results.tar.xz" "build/regression_results")
            - name: Upload Regression Test Results
              if: always()
              uses: actions/upload-artifact@v1
              with:
                  path: ./${{ matrix.config.name }}-regression_results.tar.xz
                  name: ${{ matrix.config.name }}-regression_results.tar.xz

            - name: Install
              run: |
                  mkdir -p ${{ github.workspace }}/install_dir
                  cmake --install ${{ github.workspace }}/build --prefix ${{ github.workspace }}/install_dir
            - name: Pack
              shell: cmake -P {0}
              run: |
                  execute_process(COMMAND ${CMAKE_COMMAND}
                                          -E tar cJfv "${{ matrix.config.name }}.tar.xz" "${{ github.workspace }}/install_dir")
            - name: Upload
              uses: actions/upload-artifact@v1
              with:
                  path: ./${{ matrix.config.name }}.tar.xz
                  name: ${{ matrix.config.name }}.tar.xz

    release:
        if: contains(github.ref, 'tags/v')
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1.0.0
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ github.ref }}
                release_name: Release ${{ github.ref }}
                draft: false
                prerelease: false

            - name: Store Release url
              run: |
                echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

            - uses: actions/upload-artifact@v1
              with:
                path: ./upload_url
                name: upload_url

    publish:
        if: contains(github.ref, 'tags/v')
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}
        needs: release
        strategy:
            fail-fast: false
            matrix:
                config:
                - {
                    name: "Ubuntu Latest GCC",
                    os: ubuntu-latest,
                  }
                - {
                    name: "Ubuntu Latest clang",
                    os: ubuntu-latest,
                  }
                - {
                    name: "macOs Latest clang",
                    os: ubuntu-latest,
                  }

        steps:
            - name: Download artifact
              uses: actions/download-artifact@v1
              with:
                  name: ${{ matrix.config.name }}.tar.xz
                  path: ./

            - name: Download URL
              uses: actions/download-artifact@v1
              with:
                name: upload_url
                path: ./
            - id: set_upload_url
              run: |
                upload_url=`cat ./upload_url`
                echo ::set-output name=upload_url::$upload_url

            - name: Upload to Release
              id: upload_to_release
              uses: actions/upload-release-asset@v1.0.1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
                asset_path: ./${{ matrix.config.name }}.tar.xz
                asset_name: ${{ matrix.config.name }}.tar.xz
                asset_content_type: application/x-gtar
