{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Selector The goal of Selector is to be a procedural modelling framework aimed at supporting researchers and academics in this field. Therefore, it must be flexible enough to allow the implementation of multiple algorithms and methodologies. Currently, Selector implements a graph-based approach since it is considered to be one of the most flexible methods to specify the rules in procedural modelling. The idea is to, eventually, reach a design that allows its users to re-use code from any of the available layers to implement other methodologies. Project layout selector/ source/ # Selector's library source code common/ # Code common to all layers dynamic_value/ # Interface between selector and selscript geometry_core/ # Core geometry and topology representation geometry_operations/ # Operations on geometries math_lib/ # Mathematics Library procedural_graph/ # Procedural graph, nodes and reader procedural_objects/ # Procedural objects, components and operations selscript/ # Grammar, parser and interpreter for selscript tests/ # Unit tests and regression tests for selector and selscript tools/ # Executables Procedural Objects Procedural Objects flow through the graph edges and are manipulated by Procedural Operations . Procedural Operations Procedural Operations take Procedural Objects as input, manipulating or transforming them and output new Procedural Objects through input and output interfaces respectively. Procedural Graph The Procedural Graph is what defines the rules that generate the geometry and other elements that make up the procedural scene. It defines the flow of objects through the graph and defines how parameters are set for the operations .","title":"Home"},{"location":"#welcome-to-selector","text":"The goal of Selector is to be a procedural modelling framework aimed at supporting researchers and academics in this field. Therefore, it must be flexible enough to allow the implementation of multiple algorithms and methodologies. Currently, Selector implements a graph-based approach since it is considered to be one of the most flexible methods to specify the rules in procedural modelling. The idea is to, eventually, reach a design that allows its users to re-use code from any of the available layers to implement other methodologies.","title":"Welcome to Selector"},{"location":"#project-layout","text":"selector/ source/ # Selector's library source code common/ # Code common to all layers dynamic_value/ # Interface between selector and selscript geometry_core/ # Core geometry and topology representation geometry_operations/ # Operations on geometries math_lib/ # Mathematics Library procedural_graph/ # Procedural graph, nodes and reader procedural_objects/ # Procedural objects, components and operations selscript/ # Grammar, parser and interpreter for selscript tests/ # Unit tests and regression tests for selector and selscript tools/ # Executables","title":"Project layout"},{"location":"#procedural-objects","text":"Procedural Objects flow through the graph edges and are manipulated by Procedural Operations .","title":"Procedural Objects"},{"location":"#procedural-operations","text":"Procedural Operations take Procedural Objects as input, manipulating or transforming them and output new Procedural Objects through input and output interfaces respectively.","title":"Procedural Operations"},{"location":"#procedural-graph","text":"The Procedural Graph is what defines the rules that generate the geometry and other elements that make up the procedural scene. It defines the flow of objects through the graph and defines how parameters are set for the operations .","title":"Procedural Graph"},{"location":"about/","text":"About Selector The goal of Selector is to be a procedural modelling framework aimed at supporting researchers and academics in this field. Therefore, it must be flexible enough to allow the implementation of multiple algorithms and methodologies. Currently, Selector implements a graph-based approach since it is considered to be one of the most flexible methods to specify the rules in procedural modelling. The idea is to, eventually, reach a design that allows its users to re-use code from any of the available layers to implement other methodologies.","title":"About"},{"location":"about/#about-selector","text":"The goal of Selector is to be a procedural modelling framework aimed at supporting researchers and academics in this field. Therefore, it must be flexible enough to allow the implementation of multiple algorithms and methodologies. Currently, Selector implements a graph-based approach since it is considered to be one of the most flexible methods to specify the rules in procedural modelling. The idea is to, eventually, reach a design that allows its users to re-use code from any of the available layers to implement other methodologies.","title":"About Selector"},{"location":"graph/InputInterface/","text":"InputInterface Node The InputInterface node is used to define which input interface on the downstream Operation Node the procedural objects should be pushed into. Example Usage extract_faces_in = InputInterface(interface: \"in\") extract_faces = Operation(operation: \"ExtractFaces\") extract_faces_in -> extract_faces;","title":"InputInterface Node"},{"location":"graph/InputInterface/#inputinterface-node","text":"The InputInterface node is used to define which input interface on the downstream Operation Node the procedural objects should be pushed into.","title":"InputInterface Node"},{"location":"graph/InputInterface/#example-usage","text":"extract_faces_in = InputInterface(interface: \"in\") extract_faces = Operation(operation: \"ExtractFaces\") extract_faces_in -> extract_faces;","title":"Example Usage"},{"location":"graph/Operation/","text":"Operation Node Defines an operation to be applied to incoming procedural objects. An Operation node has a single construction parameter ( operation ) which is used to define the operation to execute. As any other node, it can also have execution parameters which are passed to the operation. Example Usage create_box = Operation(operation: \"CreateBoxGeometry\") { xSize: 10, ySize: 10, zSize: 5 }","title":"Operation Node"},{"location":"graph/Operation/#operation-node","text":"Defines an operation to be applied to incoming procedural objects. An Operation node has a single construction parameter ( operation ) which is used to define the operation to execute. As any other node, it can also have execution parameters which are passed to the operation.","title":"Operation Node"},{"location":"graph/Operation/#example-usage","text":"create_box = Operation(operation: \"CreateBoxGeometry\") { xSize: 10, ySize: 10, zSize: 5 }","title":"Example Usage"},{"location":"graph/OutputInterface/","text":"OutputInterface Node The OutputInterface node is used to extract procedural objects from a specific ouput interface on the upstream Operation Node . Usage Example create_box = Operation(operation: \"CreateBoxGeometry\") { xSize: 10, ySize: 10, zSize: 5 } create_box_out = OutputInterface(interface: \"out\") create_box -> create_box_out;","title":"OutputInterface Node"},{"location":"graph/OutputInterface/#outputinterface-node","text":"The OutputInterface node is used to extract procedural objects from a specific ouput interface on the upstream Operation Node .","title":"OutputInterface Node"},{"location":"graph/OutputInterface/#usage-example","text":"create_box = Operation(operation: \"CreateBoxGeometry\") { xSize: 10, ySize: 10, zSize: 5 } create_box_out = OutputInterface(interface: \"out\") create_box -> create_box_out;","title":"Usage Example"},{"location":"graph/Parameter/","text":"Parameter Node The Parameter node is used to define parameters that can be used in other nodes. During the execution of a Parameter node, each of its parameters is injected into each of the downstream nodes, overwritting its value if the node already has a parameter with the same name. Usage Example parameter = Parameter() { amount: 10 } create_rect = Operation(operation: \"CreateRectGeometry\") { width: $< amount; >$, height: $< amount / 2; >$ } extrusion = Operation(operation: \"ExtrudeGeometry\") {extrusion_amount: $< 2 * amount; >$} parameter -> create_rect; parameter -> extrusion;","title":"Parameter Node"},{"location":"graph/Parameter/#parameter-node","text":"The Parameter node is used to define parameters that can be used in other nodes. During the execution of a Parameter node, each of its parameters is injected into each of the downstream nodes, overwritting its value if the node already has a parameter with the same name.","title":"Parameter Node"},{"location":"graph/Parameter/#usage-example","text":"parameter = Parameter() { amount: 10 } create_rect = Operation(operation: \"CreateRectGeometry\") { width: $< amount; >$, height: $< amount / 2; >$ } extrusion = Operation(operation: \"ExtrudeGeometry\") {extrusion_amount: $< 2 * amount; >$} parameter -> create_rect; parameter -> extrusion;","title":"Usage Example"},{"location":"graph/Router/","text":"Router Node Filters and routes incoming procedural objects based on a set of predicates, routing them to the respective downstream nodes. Parameter names must correspond to downstream nodes and its values are predicate names. So, in the example below, procedural objects that match the up predicate are routed to top_extrusion_in node and those that match the left predicate are routed to the left_extrusion_in node. Example Usage extract_faces_in = InputInterface(interface: \"in\") extract_faces = Operation(operation: \"ExtractFaces\") extract_faces_out = OutputInterface(interface: \"out\") extract_faces_in -> extract_faces -> extract_faces_out; top_extrusion_in = ... left_extrusion_in = ... remaining_extrusion = ... router = Router() { top_extrusion_in: up, left_extrusion_in: left } extract_faces_out -> router; router -> top_extrusion_in; router -> left_extrusion_in; Available Predicates Name Description up Matches objects whose scope's z axis is pointing towards (0,0,1). down Matches objects whose scope's z axis is pointing towards (0,0,-1). left Matches objects whose scope's z axis is pointing towards (0,1,0). right Matches objects whose scope's z axis is pointing towards (0,-1,0). front Matches objects whose scope's z axis is pointing towards (1,0,0). back Matches objects whose scope's z axis is pointing towards (-1,0,0).","title":"Router Node"},{"location":"graph/Router/#router-node","text":"Filters and routes incoming procedural objects based on a set of predicates, routing them to the respective downstream nodes. Parameter names must correspond to downstream nodes and its values are predicate names. So, in the example below, procedural objects that match the up predicate are routed to top_extrusion_in node and those that match the left predicate are routed to the left_extrusion_in node.","title":"Router Node"},{"location":"graph/Router/#example-usage","text":"extract_faces_in = InputInterface(interface: \"in\") extract_faces = Operation(operation: \"ExtractFaces\") extract_faces_out = OutputInterface(interface: \"out\") extract_faces_in -> extract_faces -> extract_faces_out; top_extrusion_in = ... left_extrusion_in = ... remaining_extrusion = ... router = Router() { top_extrusion_in: up, left_extrusion_in: left } extract_faces_out -> router; router -> top_extrusion_in; router -> left_extrusion_in;","title":"Example Usage"},{"location":"graph/Router/#available-predicates","text":"Name Description up Matches objects whose scope's z axis is pointing towards (0,0,1). down Matches objects whose scope's z axis is pointing towards (0,0,-1). left Matches objects whose scope's z axis is pointing towards (0,1,0). right Matches objects whose scope's z axis is pointing towards (0,-1,0). front Matches objects whose scope's z axis is pointing towards (1,0,0). back Matches objects whose scope's z axis is pointing towards (-1,0,0).","title":"Available Predicates"},{"location":"graph/graph/","text":"Procedural Graph Procedural graphs specify how procedural objects flow through the graph's nodes and, therefore, define the rules for procedural generation in selector. Graphs are created by reading from a graph file in selector's own graph format. Nodes Name Description Operation Defines an operation InputInterface Routes incoming objects to an input interface of a operation node's operation. OutputInterface Fetches the objects of an output interface of a operation node's operation. Parameter Allows to create parameters and expressions that are set in operation nodes. Router Filters and routes incoming procedural objects to different downstream nodes.","title":"Graph"},{"location":"graph/graph/#procedural-graph","text":"Procedural graphs specify how procedural objects flow through the graph's nodes and, therefore, define the rules for procedural generation in selector. Graphs are created by reading from a graph file in selector's own graph format.","title":"Procedural Graph"},{"location":"graph/graph/#nodes","text":"Name Description Operation Defines an operation InputInterface Routes incoming objects to an input interface of a operation node's operation. OutputInterface Fetches the objects of an output interface of a operation node's operation. Parameter Allows to create parameters and expressions that are set in operation nodes. Router Filters and routes incoming procedural objects to different downstream nodes.","title":"Nodes"},{"location":"objects/objects/","text":"Procedural Objects To achieve more flexibility Selector implements the concept of Procedural Objects and Procedural Components which is implemented with an Entity Component System architectural pattern. You can, therefore, think of Procedural Objects as bags of Procedural Components . For each type of Procedural Component there is a Procedural Component System that manages all of its respective instances. Operations always receive input Procedural Objects through their input interfaces and create new Procedural Objects with new Procedural Components which are pushed to output interfaces. Geometry Component The Geometry Component is what holds the geometry and scope for a Procedural Object . Most operations will manipulate this component somehow. Hierarchical Component The Hierarchical Component is used to keep track of which Procedural Objects were used to create other Procedural Objects . For example, if an Split operation creates the A and B objects from an input I object, then A and B are children of I .","title":"Procedural Objects"},{"location":"objects/objects/#procedural-objects","text":"To achieve more flexibility Selector implements the concept of Procedural Objects and Procedural Components which is implemented with an Entity Component System architectural pattern. You can, therefore, think of Procedural Objects as bags of Procedural Components . For each type of Procedural Component there is a Procedural Component System that manages all of its respective instances. Operations always receive input Procedural Objects through their input interfaces and create new Procedural Objects with new Procedural Components which are pushed to output interfaces.","title":"Procedural Objects"},{"location":"objects/objects/#geometry-component","text":"The Geometry Component is what holds the geometry and scope for a Procedural Object . Most operations will manipulate this component somehow.","title":"Geometry Component"},{"location":"objects/objects/#hierarchical-component","text":"The Hierarchical Component is used to keep track of which Procedural Objects were used to create other Procedural Objects . For example, if an Split operation creates the A and B objects from an input I object, then A and B are children of I .","title":"Hierarchical Component"},{"location":"operations/ClipGeometry/","text":"ClipGeometry Clips the incoming geometries agains an arbitrary plane. Input Interfaces Name Description in The input objects with the geometries to be clipped. Output Interfaces Name Description front The output objects with the clipped geometries that are in front of the plane. back The output objects with the clipped geometries that are behind of the plane. Parameters Name Type Allowed values Default Description plane Plane The plane with which to clip the geometries. Currently must be specified from a selscript expression. Exposed Parameters None Parameters Set in Procedural Objects None Usage Example clip_geometry_in = InputInterface(interface: \"in\") clip_geometry = Operation(operation: \"ClipGeometry\") { plane: $< Plane(Vector3(0, 0, 4), Vector3(1, 2, 3)); >$ } front_geometry = OutputInterface(interface: \"front\") back_geometry = OutputInterface(interface: \"back\")","title":"ClipGeometry"},{"location":"operations/ClipGeometry/#clipgeometry","text":"Clips the incoming geometries agains an arbitrary plane.","title":"ClipGeometry"},{"location":"operations/ClipGeometry/#input-interfaces","text":"Name Description in The input objects with the geometries to be clipped.","title":"Input Interfaces"},{"location":"operations/ClipGeometry/#output-interfaces","text":"Name Description front The output objects with the clipped geometries that are in front of the plane. back The output objects with the clipped geometries that are behind of the plane.","title":"Output Interfaces"},{"location":"operations/ClipGeometry/#parameters","text":"Name Type Allowed values Default Description plane Plane The plane with which to clip the geometries. Currently must be specified from a selscript expression.","title":"Parameters"},{"location":"operations/ClipGeometry/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/ClipGeometry/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/ClipGeometry/#usage-example","text":"clip_geometry_in = InputInterface(interface: \"in\") clip_geometry = Operation(operation: \"ClipGeometry\") { plane: $< Plane(Vector3(0, 0, 4), Vector3(1, 2, 3)); >$ } front_geometry = OutputInterface(interface: \"front\") back_geometry = OutputInterface(interface: \"back\")","title":"Usage Example"},{"location":"operations/CreateBoxGeometry/","text":"CreateBoxGeometry Creates a box geometry. Input Interfaces None Output Interfaces Name Description out The output object with the box geometry. Parameters Name Type Allowed values Default Description xSize float The rectangle's size along the x axis. ySize float The rectangle's size along the y axis. zSize float The rectangle's size along the z axis. Exposed Parameters None Parameters Set in Procedural Objects None Usage Example create_box = Operation(operation: \"CreateBoxGeometry\") { xSize: 10, ySize: 10, zSize: 5 } create_box_out = OutputInterface(interface: \"out\") create_box -> create_box_out;","title":"CreateBoxGeometry"},{"location":"operations/CreateBoxGeometry/#createboxgeometry","text":"Creates a box geometry.","title":"CreateBoxGeometry"},{"location":"operations/CreateBoxGeometry/#input-interfaces","text":"None","title":"Input Interfaces"},{"location":"operations/CreateBoxGeometry/#output-interfaces","text":"Name Description out The output object with the box geometry.","title":"Output Interfaces"},{"location":"operations/CreateBoxGeometry/#parameters","text":"Name Type Allowed values Default Description xSize float The rectangle's size along the x axis. ySize float The rectangle's size along the y axis. zSize float The rectangle's size along the z axis.","title":"Parameters"},{"location":"operations/CreateBoxGeometry/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/CreateBoxGeometry/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/CreateBoxGeometry/#usage-example","text":"create_box = Operation(operation: \"CreateBoxGeometry\") { xSize: 10, ySize: 10, zSize: 5 } create_box_out = OutputInterface(interface: \"out\") create_box -> create_box_out;","title":"Usage Example"},{"location":"operations/CreateRectGeometry/","text":"CreateRectGeometry Creates a rectangular geometry in one of the x, y or z planes, centered at the origin. Input Interfaces None Output Interfaces Name Description out The output object with the rectangular geometry. Parameters Name Type Allowed values Default Description width float The rectangle's width. height float The rectangle's height. plane string \"x\", \"y\", \"z\" \"z\" The plane in which to create the rectangle. Exposed Parameters None Parameters Set in Procedural Objects None Usage Example create_rect = Operation(operation: \"CreateRectGeometry\") { width: 10, height: 10, plane: \"x\" } create_rect_out = OutputInterface(interface: \"out\") create_rect -> create_rect_out;","title":"CreateRectGeometry"},{"location":"operations/CreateRectGeometry/#createrectgeometry","text":"Creates a rectangular geometry in one of the x, y or z planes, centered at the origin.","title":"CreateRectGeometry"},{"location":"operations/CreateRectGeometry/#input-interfaces","text":"None","title":"Input Interfaces"},{"location":"operations/CreateRectGeometry/#output-interfaces","text":"Name Description out The output object with the rectangular geometry.","title":"Output Interfaces"},{"location":"operations/CreateRectGeometry/#parameters","text":"Name Type Allowed values Default Description width float The rectangle's width. height float The rectangle's height. plane string \"x\", \"y\", \"z\" \"z\" The plane in which to create the rectangle.","title":"Parameters"},{"location":"operations/CreateRectGeometry/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/CreateRectGeometry/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/CreateRectGeometry/#usage-example","text":"create_rect = Operation(operation: \"CreateRectGeometry\") { width: 10, height: 10, plane: \"x\" } create_rect_out = OutputInterface(interface: \"out\") create_rect -> create_rect_out;","title":"Usage Example"},{"location":"operations/CreateSphereGeometry/","text":"CreateSphereGeometry Creates a sphere geometry centered at the origin. Input Interfaces None Ouput Interfaces Name Description out The output object with the sphere geometry. Parameters Name Type Allowed values Default Description radius float 1.0 The sphere's radius. slices int 10 The number of meridians to create. stacks int 10 The number of parallels to create. Exposed Parameters None Parameters set in Procedural Objects None Usage Example create_sphere = Operation(operation: \"CreateSphereGeometry\") { radius: 2, slices: 20, stacks: 20 } create_sphere_out = OutputInterface(interface: \"out\") create_sphere -> create_sphere_out;","title":"CreateSphereGeometry"},{"location":"operations/CreateSphereGeometry/#createspheregeometry","text":"Creates a sphere geometry centered at the origin.","title":"CreateSphereGeometry"},{"location":"operations/CreateSphereGeometry/#input-interfaces","text":"None","title":"Input Interfaces"},{"location":"operations/CreateSphereGeometry/#ouput-interfaces","text":"Name Description out The output object with the sphere geometry.","title":"Ouput Interfaces"},{"location":"operations/CreateSphereGeometry/#parameters","text":"Name Type Allowed values Default Description radius float 1.0 The sphere's radius. slices int 10 The number of meridians to create. stacks int 10 The number of parallels to create.","title":"Parameters"},{"location":"operations/CreateSphereGeometry/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/CreateSphereGeometry/#parameters-set-in-procedural-objects","text":"None","title":"Parameters set in Procedural Objects"},{"location":"operations/CreateSphereGeometry/#usage-example","text":"create_sphere = Operation(operation: \"CreateSphereGeometry\") { radius: 2, slices: 20, stacks: 20 } create_sphere_out = OutputInterface(interface: \"out\") create_sphere -> create_sphere_out;","title":"Usage Example"},{"location":"operations/ExportGeometry/","text":"ExportGeometry Exports geometries to obj files. Input Interfaces Name Description in The input objects to be exported. Output Interfaces None Parameters None Exposed Parameters None Parameters Set in Procedural Objects None Exposed Parameters Name Description op.count The number of geometries exported so far by the operation. Usage Example export_geometry_in = InputInterface(interface: \"in\") export_geometry = Operation(operation: \"ExportGeometry\") { path: $< \"geometry\" + op.count + \".obj\"; >$ } export_geometry_in -> export_geometry; extract_faces_in -> extract_faces -> extract_faces_out;","title":"ExportGeometry"},{"location":"operations/ExportGeometry/#exportgeometry","text":"Exports geometries to obj files.","title":"ExportGeometry"},{"location":"operations/ExportGeometry/#input-interfaces","text":"Name Description in The input objects to be exported.","title":"Input Interfaces"},{"location":"operations/ExportGeometry/#output-interfaces","text":"None","title":"Output Interfaces"},{"location":"operations/ExportGeometry/#parameters","text":"None","title":"Parameters"},{"location":"operations/ExportGeometry/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/ExportGeometry/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/ExportGeometry/#exposed-parameters_1","text":"Name Description op.count The number of geometries exported so far by the operation.","title":"Exposed Parameters"},{"location":"operations/ExportGeometry/#usage-example","text":"export_geometry_in = InputInterface(interface: \"in\") export_geometry = Operation(operation: \"ExportGeometry\") { path: $< \"geometry\" + op.count + \".obj\"; >$ } export_geometry_in -> export_geometry; extract_faces_in -> extract_faces -> extract_faces_out;","title":"Usage Example"},{"location":"operations/ExtractFaces/","text":"ExtractFaces Creates geometries from the faces of incoming geometries. Input Interfaces Name Description in The input objects with the geometries whose faces are to be extracted. Output Interfaces Name Description out The output geometries. Parameters None Exposed Parameters None Parameters Set in Procedural Objects None Usage Example extract_faces_in = InputInterface(interface: \"in\") extract_faces = Operation(operation: \"ExtractFaces\") extract_faces_out = OutputInterface(interface: \"out\") extract_faces_in -> extract_faces -> extract_faces_out;","title":"ExtractFaces"},{"location":"operations/ExtractFaces/#extractfaces","text":"Creates geometries from the faces of incoming geometries.","title":"ExtractFaces"},{"location":"operations/ExtractFaces/#input-interfaces","text":"Name Description in The input objects with the geometries whose faces are to be extracted.","title":"Input Interfaces"},{"location":"operations/ExtractFaces/#output-interfaces","text":"Name Description out The output geometries.","title":"Output Interfaces"},{"location":"operations/ExtractFaces/#parameters","text":"None","title":"Parameters"},{"location":"operations/ExtractFaces/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/ExtractFaces/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/ExtractFaces/#usage-example","text":"extract_faces_in = InputInterface(interface: \"in\") extract_faces = Operation(operation: \"ExtractFaces\") extract_faces_out = OutputInterface(interface: \"out\") extract_faces_in -> extract_faces -> extract_faces_out;","title":"Usage Example"},{"location":"operations/ExtractScope/","text":"ExtractScope Creates a box from the scope of an input object. Input Interfaces Name Description in The input objects from which scopes will be extracted. Output Interfaces Name Description out The output object with the box geometry. Parameters None Exposed Parameters None Parameters Set in Procedural Objects None Usage Example extract_scope_in = InputInterface(interface: \"in\") extract_scope = Operation(operation: \"ExtractScope\") extract_scope_out = OutputInterface(interface: \"out\") extract_scope_in -> extract_scope -> extract_scope_out;","title":"ExtractScope"},{"location":"operations/ExtractScope/#extractscope","text":"Creates a box from the scope of an input object.","title":"ExtractScope"},{"location":"operations/ExtractScope/#input-interfaces","text":"Name Description in The input objects from which scopes will be extracted.","title":"Input Interfaces"},{"location":"operations/ExtractScope/#output-interfaces","text":"Name Description out The output object with the box geometry.","title":"Output Interfaces"},{"location":"operations/ExtractScope/#parameters","text":"None","title":"Parameters"},{"location":"operations/ExtractScope/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/ExtractScope/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/ExtractScope/#usage-example","text":"extract_scope_in = InputInterface(interface: \"in\") extract_scope = Operation(operation: \"ExtractScope\") extract_scope_out = OutputInterface(interface: \"out\") extract_scope_in -> extract_scope -> extract_scope_out;","title":"Usage Example"},{"location":"operations/ExtrudeGeometry/","text":"ExtrudeGeometry Extrudes all faces of the incoming geometries by an amount. Input Interfaces Name Description in The input objects with the geometries to be extruded. Output Interfaces Name Description out The output objects with the extruded geometries. Parameters Name Type Allowed values Default Description extrusion_amount float The amount to extrude along each face normal. Exposed Parameters None Parameters Set in Procedural Objects None Usage Example extrusion_in = InputInterface(interface: \"in\") extrusion = Operation(operation: \"ExtrudeGeometry\") {extrusion_amount: 10} extrusion_out = OutputInterface(interface: \"out\")","title":"ExtrudeGeometry"},{"location":"operations/ExtrudeGeometry/#extrudegeometry","text":"Extrudes all faces of the incoming geometries by an amount.","title":"ExtrudeGeometry"},{"location":"operations/ExtrudeGeometry/#input-interfaces","text":"Name Description in The input objects with the geometries to be extruded.","title":"Input Interfaces"},{"location":"operations/ExtrudeGeometry/#output-interfaces","text":"Name Description out The output objects with the extruded geometries.","title":"Output Interfaces"},{"location":"operations/ExtrudeGeometry/#parameters","text":"Name Type Allowed values Default Description extrusion_amount float The amount to extrude along each face normal.","title":"Parameters"},{"location":"operations/ExtrudeGeometry/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/ExtrudeGeometry/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/ExtrudeGeometry/#usage-example","text":"extrusion_in = InputInterface(interface: \"in\") extrusion = Operation(operation: \"ExtrudeGeometry\") {extrusion_amount: 10} extrusion_out = OutputInterface(interface: \"out\")","title":"Usage Example"},{"location":"operations/FaceOffset/","text":"FaceOffset Creates new geometries by offsetting each face. For each face in the input geometry, this operation creates a geometry (the inner geometry) whose edges are parallel to the input face but offset inwards by a given amount. It also creates a geometry for each edge of the original face. This geometry takes the space between the original edge, the corresponding edge in the inner geometry and the bisecting lines between the adjacent edges. In other words, this operation creates an inner geometry and outer geometries such that the outer geometries create a border of a given amount. Input Interfaces Name Description in The input procedural objects to process. Output Interfaces Name Description inner Procedural objects created from the interior geometries are output through this interface. outer Procedural objects created from the border geometries are output through this interface. Parameters Name Type Allowed values Default Description amount float The border amount. Exposed Parameters None Parameters Set in Procedural Objects Name Description offset_tag A String value that takes the value of \"inner\" or \"outer\" Usage Example face_offset_in = InputInterface(interface: \"in\") face_offset = Operation(operation: \"FaceOffset\") { amount: 1 } face_offset_inner = OutputInterface(interface: \"inner\") face_offset_outer = OutputInterface(interface: \"outer\") face_offset_in -> face_offset; face_offset -> face_offset_inner; face_offset -> face_offset_outer;","title":"FaceOffset"},{"location":"operations/FaceOffset/#faceoffset","text":"Creates new geometries by offsetting each face. For each face in the input geometry, this operation creates a geometry (the inner geometry) whose edges are parallel to the input face but offset inwards by a given amount. It also creates a geometry for each edge of the original face. This geometry takes the space between the original edge, the corresponding edge in the inner geometry and the bisecting lines between the adjacent edges. In other words, this operation creates an inner geometry and outer geometries such that the outer geometries create a border of a given amount.","title":"FaceOffset"},{"location":"operations/FaceOffset/#input-interfaces","text":"Name Description in The input procedural objects to process.","title":"Input Interfaces"},{"location":"operations/FaceOffset/#output-interfaces","text":"Name Description inner Procedural objects created from the interior geometries are output through this interface. outer Procedural objects created from the border geometries are output through this interface.","title":"Output Interfaces"},{"location":"operations/FaceOffset/#parameters","text":"Name Type Allowed values Default Description amount float The border amount.","title":"Parameters"},{"location":"operations/FaceOffset/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/FaceOffset/#parameters-set-in-procedural-objects","text":"Name Description offset_tag A String value that takes the value of \"inner\" or \"outer\"","title":"Parameters Set in Procedural Objects"},{"location":"operations/FaceOffset/#usage-example","text":"face_offset_in = InputInterface(interface: \"in\") face_offset = Operation(operation: \"FaceOffset\") { amount: 1 } face_offset_inner = OutputInterface(interface: \"inner\") face_offset_outer = OutputInterface(interface: \"outer\") face_offset_in -> face_offset; face_offset -> face_offset_inner; face_offset -> face_offset_outer;","title":"Usage Example"},{"location":"operations/RepeatSplit/","text":"RepeatSplit Repeatedly splits the incoming geometries with planes created given a size along a scope's axis. Input Interfaces Name Description in The input objects with the geometries to be split. Output Interfaces Name Description out The output objects split objects. Parameters Name Type Allowed values Default Description axis string \"x\", \"y\", \"z\" \"x\" The scope's axis along which the split planes will be created. size float The distance between splits. adjust string \"true\", \"false\" \"false\" Wether to round size such that there is an integer number of splits. Exposed Parameters None Parameters Set in Procedural Objects Name Description index The split index, starting in 0. Usage Example repeat_split_in = InputInterface(interface: \"in\") repeat_split = Operation(operation: \"RepeatSplit\") { size: 5, adjust: \"false\", axis: \"x\" } repeat_split_out = OutputInterface(interface: \"out\") repeat_split_in -> repeat_split -> repeat_split_out;","title":"RepeatSplit"},{"location":"operations/RepeatSplit/#repeatsplit","text":"Repeatedly splits the incoming geometries with planes created given a size along a scope's axis.","title":"RepeatSplit"},{"location":"operations/RepeatSplit/#input-interfaces","text":"Name Description in The input objects with the geometries to be split.","title":"Input Interfaces"},{"location":"operations/RepeatSplit/#output-interfaces","text":"Name Description out The output objects split objects.","title":"Output Interfaces"},{"location":"operations/RepeatSplit/#parameters","text":"Name Type Allowed values Default Description axis string \"x\", \"y\", \"z\" \"x\" The scope's axis along which the split planes will be created. size float The distance between splits. adjust string \"true\", \"false\" \"false\" Wether to round size such that there is an integer number of splits.","title":"Parameters"},{"location":"operations/RepeatSplit/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/RepeatSplit/#parameters-set-in-procedural-objects","text":"Name Description index The split index, starting in 0.","title":"Parameters Set in Procedural Objects"},{"location":"operations/RepeatSplit/#usage-example","text":"repeat_split_in = InputInterface(interface: \"in\") repeat_split = Operation(operation: \"RepeatSplit\") { size: 5, adjust: \"false\", axis: \"x\" } repeat_split_out = OutputInterface(interface: \"out\") repeat_split_in -> repeat_split -> repeat_split_out;","title":"Usage Example"},{"location":"operations/Rotate/","text":"Rotate Rotates the input geometries. Input Interfaces Name Description in The input objects with the geometries to be rotated. Output Interfaces Name Description out The output objects with the rotated geometries.. Parameters Name Type Allowed values Default Description x float The amount to rotate around the x axis (world or scope). y float The amount to rotate around the y axis (world or scope). z float The amount to rotate around the z axis (world or scope). world string \"true\", \"false\" \"false\" If false, rotates the geometry given the scope's frame of coordinates. If true, rotates given the world axis. rotation_order string combinations of \"x\", \"y\", and \"z\" \"xyz\" Order in which to apply the rotations. Exposed Parameters None Parameters Set in Procedural Objects None Usage Example rotate_in = InputInterface(interface: \"in\", offset:0) rotate = Operation(operation: \"Rotate\") { x: 45, y: 0, z: 0, rotation_order: \"x\", world: \"true\" } rotate_out = OutputInterface(interface: \"out\") rotate_in -> rotate -> rotate_out;","title":"Rotate"},{"location":"operations/Rotate/#rotate","text":"Rotates the input geometries.","title":"Rotate"},{"location":"operations/Rotate/#input-interfaces","text":"Name Description in The input objects with the geometries to be rotated.","title":"Input Interfaces"},{"location":"operations/Rotate/#output-interfaces","text":"Name Description out The output objects with the rotated geometries..","title":"Output Interfaces"},{"location":"operations/Rotate/#parameters","text":"Name Type Allowed values Default Description x float The amount to rotate around the x axis (world or scope). y float The amount to rotate around the y axis (world or scope). z float The amount to rotate around the z axis (world or scope). world string \"true\", \"false\" \"false\" If false, rotates the geometry given the scope's frame of coordinates. If true, rotates given the world axis. rotation_order string combinations of \"x\", \"y\", and \"z\" \"xyz\" Order in which to apply the rotations.","title":"Parameters"},{"location":"operations/Rotate/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/Rotate/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/Rotate/#usage-example","text":"rotate_in = InputInterface(interface: \"in\", offset:0) rotate = Operation(operation: \"Rotate\") { x: 45, y: 0, z: 0, rotation_order: \"x\", world: \"true\" } rotate_out = OutputInterface(interface: \"out\") rotate_in -> rotate -> rotate_out;","title":"Usage Example"},{"location":"operations/Scale/","text":"Scale Scales the input geometries. Input Interfaces Name Description in The input objects with the geometries to be scaled. Output Interfaces Name Description out The output objects with the scaled geometries. Parameters Name Type Allowed values Default Description x float The amount to scale along the x axis (world or scope). y float The amount to scale along t the y axis (world or scope). z float The amount to scale along t the z axis (world or scope). pivotal_point string \"scope_center\", \"scope_origin\", \"world_origin\" \"scope_center\" The point that the geometry will be scaled towards/away. Exposed Parameters None Parameters Set in Procedural Objects None Usage Example scale_scope_center_in = InputInterface(interface: \"in\") scale_scope_center = Operation(operation: \"Scale\") { x: 0.1, y: 0.1, z: 0.1, pivotal_point: \"scope_center\" } scale_scope_center_out = OutputInterface(interface: \"out\") scale_scope_center_in -> scale_scope_center -> scale_scope_center_out;","title":"Scale"},{"location":"operations/Scale/#scale","text":"Scales the input geometries.","title":"Scale"},{"location":"operations/Scale/#input-interfaces","text":"Name Description in The input objects with the geometries to be scaled.","title":"Input Interfaces"},{"location":"operations/Scale/#output-interfaces","text":"Name Description out The output objects with the scaled geometries.","title":"Output Interfaces"},{"location":"operations/Scale/#parameters","text":"Name Type Allowed values Default Description x float The amount to scale along the x axis (world or scope). y float The amount to scale along t the y axis (world or scope). z float The amount to scale along t the z axis (world or scope). pivotal_point string \"scope_center\", \"scope_origin\", \"world_origin\" \"scope_center\" The point that the geometry will be scaled towards/away.","title":"Parameters"},{"location":"operations/Scale/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/Scale/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/Scale/#usage-example","text":"scale_scope_center_in = InputInterface(interface: \"in\") scale_scope_center = Operation(operation: \"Scale\") { x: 0.1, y: 0.1, z: 0.1, pivotal_point: \"scope_center\" } scale_scope_center_out = OutputInterface(interface: \"out\") scale_scope_center_in -> scale_scope_center -> scale_scope_center_out;","title":"Usage Example"},{"location":"operations/Split/","text":"Split Splits the incoming geometries with planes created given a series of sizes along a scope's axis. Input Interfaces Name Description in The input objects with the geometries to be split. Output Interfaces Name Description split_$n$ The output objects with the $n-th$ split. Parameters Note: the parameters for the Split operation are most likely to change as soon as lists are implemented in selscript. Name Type Allowed values Default Description axis string \"x\", \"y\", \"z\" \"x\" The scope's axis along which the split planes will be created. split_count integer The number of splits to create. split_$n$ float The size for the $n-th$ split. Exposed Parameters None Parameters Set in Procedural Objects None Usage Example split_in = InputInterface(interface: \"in\") split = Operation(operation: \"Split\") { axis: \"x\", split_count: 3, split_1: 1, split_2: 3, split_3: 6 } split_out_1 = OutputInterface(interface: \"split_1\") split_out_2 = OutputInterface(interface: \"split_2\") split_out_3 = OutputInterface(interface: \"split_3\")","title":"Split"},{"location":"operations/Split/#split","text":"Splits the incoming geometries with planes created given a series of sizes along a scope's axis.","title":"Split"},{"location":"operations/Split/#input-interfaces","text":"Name Description in The input objects with the geometries to be split.","title":"Input Interfaces"},{"location":"operations/Split/#output-interfaces","text":"Name Description split_$n$ The output objects with the $n-th$ split.","title":"Output Interfaces"},{"location":"operations/Split/#parameters","text":"Note: the parameters for the Split operation are most likely to change as soon as lists are implemented in selscript. Name Type Allowed values Default Description axis string \"x\", \"y\", \"z\" \"x\" The scope's axis along which the split planes will be created. split_count integer The number of splits to create. split_$n$ float The size for the $n-th$ split.","title":"Parameters"},{"location":"operations/Split/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/Split/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/Split/#usage-example","text":"split_in = InputInterface(interface: \"in\") split = Operation(operation: \"Split\") { axis: \"x\", split_count: 3, split_1: 1, split_2: 3, split_3: 6 } split_out_1 = OutputInterface(interface: \"split_1\") split_out_2 = OutputInterface(interface: \"split_2\") split_out_3 = OutputInterface(interface: \"split_3\")","title":"Usage Example"},{"location":"operations/Translate/","text":"Translate Translates the input geometries. Input Interfaces Name Description in The input objects with the geometries to be translated. Output Interfaces Name Description out The output objects with the translated geometries.. Parameters Name Type Allowed values Default Description x float The amount to translate along the x axis (world or scope). y float The amount to translate along the y axis (world or scope). z float The amount to translate along the z axis (world or scope). world string \"true\", \"false\" \"false\" If false, translates the geometry given the scope's frame of coordinates. If true, translates given the world axis. Exposed Parameters None Parameters Set in Procedural Objects None Usage Example translate_in = InputInterface(interface: \"in\", offset:0) translate = Operation(operation: \"Translate\") { x: 1, y: 2, z: 3, world: \"true\" } translate_out = OutputInterface(interface: \"out\") translate_in -> translate -> translate_out;","title":"Translate"},{"location":"operations/Translate/#translate","text":"Translates the input geometries.","title":"Translate"},{"location":"operations/Translate/#input-interfaces","text":"Name Description in The input objects with the geometries to be translated.","title":"Input Interfaces"},{"location":"operations/Translate/#output-interfaces","text":"Name Description out The output objects with the translated geometries..","title":"Output Interfaces"},{"location":"operations/Translate/#parameters","text":"Name Type Allowed values Default Description x float The amount to translate along the x axis (world or scope). y float The amount to translate along the y axis (world or scope). z float The amount to translate along the z axis (world or scope). world string \"true\", \"false\" \"false\" If false, translates the geometry given the scope's frame of coordinates. If true, translates given the world axis.","title":"Parameters"},{"location":"operations/Translate/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/Translate/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/Translate/#usage-example","text":"translate_in = InputInterface(interface: \"in\", offset:0) translate = Operation(operation: \"Translate\") { x: 1, y: 2, z: 3, world: \"true\" } translate_out = OutputInterface(interface: \"out\") translate_in -> translate -> translate_out;","title":"Usage Example"},{"location":"operations/TriangulateGeometry/","text":"TriangulateGeometry Triangulates the faces of incoming geometries. Input Interfaces Name Description in The input objects with the geometries to be triangulated. Output Interfaces Name Description out The output triangulated objects. Parameters None Exposed Parameters None Parameters Set in Procedural Objects None Usage Example triangulate_geometry_in = InputInterface(interface: \"in\") triangulate_geometry = Operation(operation: \"TriangulateGeometry\") triangulate_geometry_out = OutputInterface(interface: \"out\")","title":"TriangulateGeometry"},{"location":"operations/TriangulateGeometry/#triangulategeometry","text":"Triangulates the faces of incoming geometries.","title":"TriangulateGeometry"},{"location":"operations/TriangulateGeometry/#input-interfaces","text":"Name Description in The input objects with the geometries to be triangulated.","title":"Input Interfaces"},{"location":"operations/TriangulateGeometry/#output-interfaces","text":"Name Description out The output triangulated objects.","title":"Output Interfaces"},{"location":"operations/TriangulateGeometry/#parameters","text":"None","title":"Parameters"},{"location":"operations/TriangulateGeometry/#exposed-parameters","text":"None","title":"Exposed Parameters"},{"location":"operations/TriangulateGeometry/#parameters-set-in-procedural-objects","text":"None","title":"Parameters Set in Procedural Objects"},{"location":"operations/TriangulateGeometry/#usage-example","text":"triangulate_geometry_in = InputInterface(interface: \"in\") triangulate_geometry = Operation(operation: \"TriangulateGeometry\") triangulate_geometry_out = OutputInterface(interface: \"out\")","title":"Usage Example"},{"location":"operations/operations/","text":"Operations Procedural operations create, or otherwise manipulate Procedural Objects and their Procedural Components. Operations receive input objects and output created objects through named input and output interfaces respectively. Operations should not modify the input objects but should, instead always create new objects to be output. The reason is that the same object can be pushed to input interfaces of different operations. Geometry Creation Operation Description CreateRectGeometry Creates a rectangular geometry in either the x, y or z planes. CreateBoxGeometry Creates a box aligned to the world's axis. CreateSphereGeometry Creates a sphere. ExtractScope Create a box for a given scope. Geometry Transform Operation Description Translate Translates a geometry. Rotate Rotates a geometry. Scale Scales a geometry. Geometry Modification Operation Description ClipGeometry Clips a geometry with a plane. ExtrudeGeometry Extrudes all faces of a geometry by a given amount. Split Splits a geometry with a series of planes aligned to one of its scope's axis. RepeatSplit Repeatedly splits a geometry along a scope's axis into equally spaced sections. TriangulateGeometry Triangulates a geometry. ExtractFaces Creates a new geometry with each face in a previous geometry. FaceOffset Creates new geometries by offsetting each face. Export Operation Description ExportGeometry Exports geometries to a file.","title":"Operations"},{"location":"operations/operations/#operations","text":"Procedural operations create, or otherwise manipulate Procedural Objects and their Procedural Components. Operations receive input objects and output created objects through named input and output interfaces respectively. Operations should not modify the input objects but should, instead always create new objects to be output. The reason is that the same object can be pushed to input interfaces of different operations.","title":"Operations"},{"location":"operations/operations/#geometry-creation","text":"Operation Description CreateRectGeometry Creates a rectangular geometry in either the x, y or z planes. CreateBoxGeometry Creates a box aligned to the world's axis. CreateSphereGeometry Creates a sphere. ExtractScope Create a box for a given scope.","title":"Geometry Creation"},{"location":"operations/operations/#geometry-transform","text":"Operation Description Translate Translates a geometry. Rotate Rotates a geometry. Scale Scales a geometry.","title":"Geometry Transform"},{"location":"operations/operations/#geometry-modification","text":"Operation Description ClipGeometry Clips a geometry with a plane. ExtrudeGeometry Extrudes all faces of a geometry by a given amount. Split Splits a geometry with a series of planes aligned to one of its scope's axis. RepeatSplit Repeatedly splits a geometry along a scope's axis into equally spaced sections. TriangulateGeometry Triangulates a geometry. ExtractFaces Creates a new geometry with each face in a previous geometry. FaceOffset Creates new geometries by offsetting each face.","title":"Geometry Modification"},{"location":"operations/operations/#export","text":"Operation Description ExportGeometry Exports geometries to a file.","title":"Export"}]}