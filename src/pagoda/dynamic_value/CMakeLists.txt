set(DYNAMIC_VALUE_SRCS
    "binding/binary_ops.h"
    "binding/call_free_function.h"
    "binding/call_member_function.h"
    "binding/can_cast_to_native.h"
    "binding/cast_to.h"
    "binding/has_operators.h"
    "binding/make_free_function.h"
    "binding/make_member_function.h"
    "binding/native_value_name.cpp"
    "binding/native_value_name.h"
    "binding/return_from_function.h"
    "binding/return_from_member_function.h"
    "binding/type_name.h"
    "binding/unary_ops.h"
    "boolean_value.cpp"
    "boolean_value.h"
    "builtin_class.cpp"
    "builtin_class.h"
    "callable_body_not_set.cpp"
    "callable_body_not_set.h"
    "class_base.cpp"
    "class_base.h"
    "dynamic_class.cpp"
    "dynamic_class.h"
    "dynamic_instance.cpp"
    "dynamic_instance.h"
    "dynamic_plane.cpp"
    "dynamic_plane.h"
    "dynamic_value_base.cpp"
    "dynamic_value_base.h"
    "dynamic_value_table.cpp"
    "dynamic_value_table.h"
    "expression.cpp"
    "expression.h"
    "float_value.cpp"
    "float_value.h"
    "function.cpp"
    "function.h"
    "integer_value.cpp"
    "integer_value.h"
    "null_object_value.cpp"
    "null_object_value.h"
    "register_member_function.h"
    "string_value.cpp"
    "string_value.h"
    "type_info.cpp"
    "type_info.h"
    "undefined_operator.cpp"
    "undefined_operator.h"
    "value_not_found.cpp"
    "value_not_found.h"
    "variable.cpp"
    "variable.h"
    "vector3.cpp"
    "vector3.h"
)

add_library(dynamic_value OBJECT ${DYNAMIC_VALUE_SRCS})

target_include_directories(
    dynamic_value
    PRIVATE
        $<INSTALL_INTERFACE:pagoda>
        $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/src>
        ${Boost_INCLUDE_DIRS}
)

target_compile_features(
    dynamic_value
    PRIVATE
        cxx_std_17
)

target_compile_options(
    dynamic_value
    PRIVATE
        -Wall
        $<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Werror>
        $<$<CXX_COMPILER_ID:GNU>:-Wno-gnu-zero-variadic-macro-arguments>
)

target_compile_definitions(
    dynamic_value
    PRIVATE
        $<$<CONFIG:DEBUG>:DEBUG>
)

target_link_libraries(
    dynamic_value
    PRIVATE
        common
)

