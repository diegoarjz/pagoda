#include <gtest/gtest.h>

#include <common/file_util.h>
#include <common/logger.h>
#include <common/profiler.h>
#include <procedural_graph/default_scheduler.h>
#include <procedural_graph/graph.h>
#include <procedural_graph/reader.h>
#include <procedural_objects/geometry_system.h>
#include <procedural_objects/hierarchical_system.h>
#include <procedural_objects/procedural_object.h>

#include <selector.h>

#include <boost/filesystem/path.hpp>

using namespace selector;

class RegressionTest
{
public:
	static void SetShouldWriteFiles(const bool& write) { s_writeFiles = write; }

	static boost::filesystem::path GetTestFilesDirectory() { return "@CMAKE_CURRENT_SOURCE_DIR@"; }

	RegressionTest(const std::string& name) : m_regressionTestName(name)
	{
		ClearDirectory();
		ReadGraphFromFile(GetInputGraph().string());
		ExecuteGraph();
		MatchFiles();
	}

	boost::filesystem::path GetInputGraph()
	{
		auto pathToGraphFile = GetTestFilesDirectory();
		pathToGraphFile /= "test_files";
		pathToGraphFile /= m_regressionTestName;
		pathToGraphFile /= m_regressionTestName + ".sel";
		return pathToGraphFile;
	}

	boost::filesystem::path GetExpectedResultsDir()
	{
		auto dir = GetTestFilesDirectory();
		dir /= "test_files";
		dir /= m_regressionTestName;
		if (!boost::filesystem::exists(dir))
		{
			file_util::CreateDirectories(dir);
		}
		return dir;
	}

	boost::filesystem::path GetExpectedResultFile(const boost::filesystem::path& expectedFile)
	{
		return GetExpectedResultsDir() / expectedFile;
	}

	std::set<boost::filesystem::path> GetAllExpectedFiles()
	{
		std::set<boost::filesystem::path> files;
		file_util::GetAllFilesWithExtension(GetExpectedResultsDir(), ".obj", std::inserter(files, files.end()));
		return files;
	}

	boost::filesystem::path GetResultsDir()
	{
		boost::filesystem::path p = "regression_results";
		p /= m_regressionTestName;
		return p;
	}

	boost::filesystem::path GetResultFile(const boost::filesystem::path& f) { return GetResultsDir() / f; }

	std::set<boost::filesystem::path> GetAllResultFiles()
	{
		std::set<boost::filesystem::path> files;
		file_util::GetAllFilesWithExtension(GetResultsDir(), ".obj", std::inserter(files, files.end()));
		return files;
	}

	void ClearDirectory() { boost::filesystem::remove_all(GetResultsDir()); }

	std::shared_ptr<Graph> ReadGraphFromFile(const std::string& filePath)
	{
		m_graph = m_selector.CreateGraphFromFile(filePath);
		return m_graph;
	}

	void ExecuteGraph() { m_graph->Execute(); }

	void MatchFiles()
	{
		auto expectedFiles = GetAllExpectedFiles();
		auto resultFiles = GetAllResultFiles();

		if (s_writeFiles)
		{
			for (const auto& f : expectedFiles)
			{
				boost::filesystem::remove(GetExpectedResultFile(f));
			}
			for (const auto& f : resultFiles)
			{
				boost::filesystem::copy(GetResultFile(f), GetExpectedResultFile(f));
			}
		}
		else
		{
			EXPECT_EQ(expectedFiles, resultFiles);
			for (const auto& f : expectedFiles)
			{
				std::string resultFile = file_util::LoadFileToString(GetResultFile(f));
				std::string expectedFile = file_util::LoadFileToString(GetExpectedResultFile(f));
				EXPECT_EQ(expectedFile, resultFile);
			}
		}
	}

private:
	std::string m_regressionTestName;

	GraphPtr m_graph;
	Selector m_selector;

	static bool s_writeFiles;
};
bool RegressionTest::s_writeFiles = false;

#define REGRESSION_TEST(NAME) \
	TEST(RegressionTestCase, NAME) { RegressionTest(#NAME); }

REGRESSION_TEST(create_rect)
REGRESSION_TEST(create_box)
REGRESSION_TEST(create_sphere)
REGRESSION_TEST(export_geometry)
REGRESSION_TEST(expression)
REGRESSION_TEST(extrusion)
REGRESSION_TEST(parameter_definition)
REGRESSION_TEST(parameter_overwrite)
REGRESSION_TEST(parameter_renaming)
REGRESSION_TEST(clip_geometry)
REGRESSION_TEST(triangulate_geometry)
REGRESSION_TEST(translate)
REGRESSION_TEST(repeat_split)
REGRESSION_TEST(face_offset)
REGRESSION_TEST(extract_faces)
REGRESSION_TEST(router)
REGRESSION_TEST(split)
REGRESSION_TEST(scale)
REGRESSION_TEST(rotate)
REGRESSION_TEST(parameters_in_procedural_objects)
/*
REGRESSION_TEST(banner, "geometry0.obj", "geometry107.obj", "geometry18.obj", "geometry27.obj", "geometry36.obj",
                "geometry45.obj", "geometry54.obj", "geometry63.obj", "geometry72.obj", "geometry81.obj",
                "geometry90.obj", "geometry1.obj", "geometry108.obj", "geometry19.obj", "geometry28.obj",
                "geometry37.obj", "geometry46.obj", "geometry55.obj", "geometry64.obj", "geometry73.obj",
                "geometry82.obj", "geometry91.obj", "geometry10.obj", "geometry109.obj", "geometry2.obj",
                "geometry29.obj", "geometry38.obj", "geometry47.obj", "geometry56.obj", "geometry65.obj",
                "geometry74.obj", "geometry83.obj", "geometry92.obj", "geometry100.obj", "geometry11.obj",
                "geometry20.obj", "geometry3.obj", "geometry39.obj", "geometry48.obj", "geometry57.obj",
                "geometry66.obj", "geometry75.obj", "geometry84.obj", "geometry93.obj", "geometry101.obj",
                "geometry12.obj", "geometry21.obj", "geometry30.obj", "geometry4.obj", "geometry49.obj",
                "geometry58.obj", "geometry67.obj", "geometry76.obj", "geometry85.obj", "geometry94.obj",
                "geometry102.obj", "geometry13.obj", "geometry22.obj", "geometry31.obj", "geometry40.obj",
                "geometry5.obj", "geometry59.obj", "geometry68.obj", "geometry77.obj", "geometry86.obj",
                "geometry95.obj", "geometry103.obj", "geometry14.obj", "geometry23.obj", "geometry32.obj",
                "geometry41.obj", "geometry50.obj", "geometry6.obj", "geometry69.obj", "geometry78.obj",
                "geometry87.obj", "geometry96.obj", "geometry104.obj", "geometry15.obj", "geometry24.obj",
                "geometry33.obj", "geometry42.obj", "geometry51.obj", "geometry60.obj", "geometry7.obj",
                "geometry79.obj", "geometry88.obj", "geometry97.obj", "geometry105.obj", "geometry16.obj",
                "geometry25.obj", "geometry34.obj", "geometry43.obj", "geometry52.obj", "geometry61.obj",
                "geometry70.obj", "geometry8.obj", "geometry89.obj", "geometry98.obj", "geometry106.obj",
                "geometry17.obj", "geometry26.obj", "geometry35.obj", "geometry44.obj", "geometry53.obj",
                "geometry62.obj", "geometry71.obj", "geometry80.obj", "geometry9.obj", "geometry99.obj")
                */

int main(int argc, char* argv[])
{
	bool writeFiles = false;
	for (auto i = 1u; i < argc; ++i)
	{
		if (std::string(argv[i]) == "--writeFiles")
		{
			writeFiles = true;
			break;
		}
	}
	RegressionTest::SetShouldWriteFiles(writeFiles);
	::testing::InitGoogleTest(&argc, argv);

	auto returnVal = RUN_ALL_TESTS();

	ConsoleProfilerLogger consoleLogger(ProfilerManager::Instance());
	consoleLogger.Log(20);

	return returnVal;
}
